package lab1a;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.awt.geom.AffineTransform;


public class TransformedShapes extends JPanel {

    //------- For drawing ONLY while paintComponent is being executed! --------

    private Graphics2D g2; // A copy of the graphics context from paintComponent.

    /**
     * Removes any transformations that have been applied to g2, so that
     * it is back to the standard default coordinate system.
     */
    private void resetTransform() {
        g2.setTransform(new AffineTransform());
    }

    /**
     * Draws a filled circle of radius 50 (diameter 100) centered at (0,0),
     * subject to whatever transform(s) have been applied to g2.
     */
    //private void circle() {
      //  g2.fillOval(-50,-50,100,100);
    //}

    /**
     * Draws a filled square with side 100 centered at (0,0), subject
     * to whatever transform(s) have been applied to g2.
     */
    private void square1() {
        g2.fillRect(-50,-50,100,100);
    }

    private void square2() {
        g2.fillRect(-50,2000,100,100);
    }
    private void square3() {
        g2.fillRect(-50,-2000,100,100);
    }
    private void square4() {
        g2.fillRect(0,0,10,285);
    }
    private void square5() {
        g2.fillRect(-10,0,10,280);
    }
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        g2 = (Graphics2D)g.create();
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

        // TODO Draw the required image, using ONLY the four methods defined above,
        // along with g2.setColor, g1.scale, g2.translate, and g2.rotate.



        g2.setColor(Color.WHITE);
        g2.translate(300,300);
        g2.scale(4,4);
        square1();

        resetTransform();

        g2.setColor(Color.red);
        g2.translate(300,300);
        g2.scale(4,0.1);
        square2();

        resetTransform();

        g2.setColor(Color.red);
        g2.translate(300,300);
        g2.scale(4,0.1);
        square3();

        resetTransform();

        g2.setColor(Color.red);
        g2.translate(300,300);
       // g2.scale(4,0.1);
        g2.rotate(Math.toRadians(45));
        square4();

        resetTransform();

        g2.setColor(Color.red);
        g2.translate(300,300);
        // g2.scale(4,0.1);
        g2.rotate(Math.toRadians(225));
        square5();

        resetTransform();
    }

    public TransformedShapes() {
        setPreferredSize(new Dimension(600,600) );
        setBackground(Color.black);
        setBorder(BorderFactory.createLineBorder(Color.BLACK,4));
    }

    public static void main(String[] args)  {
        JFrame window = new JFrame("Drawing With Transforms");
        window.setContentPane(new TransformedShapes());
        window.pack();
        window.setResizable(false);
        window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        window.setLocation( (screen.width - window.getWidth())/2, (screen.height - window.getHeight())/2 );
        window.setVisible(true);
    }
}
